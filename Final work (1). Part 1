{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "47dcac12",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Setting up libraries\n",
    "#Kate\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2bcb61c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kate\n",
    "train=pd.read_csv('https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/07_Visualization/Titanic_Desaster/train.csv')\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "34799915",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>1305</td>\n",
       "      <td>3</td>\n",
       "      <td>Spector, Mr. Woolf</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>A.5. 3236</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>414</th>\n",
       "      <td>1306</td>\n",
       "      <td>1</td>\n",
       "      <td>Oliva y Ocana, Dona. Fermina</td>\n",
       "      <td>female</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17758</td>\n",
       "      <td>108.9000</td>\n",
       "      <td>C105</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>1307</td>\n",
       "      <td>3</td>\n",
       "      <td>Saether, Mr. Simon Sivertsen</td>\n",
       "      <td>male</td>\n",
       "      <td>38.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>SOTON/O.Q. 3101262</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>416</th>\n",
       "      <td>1308</td>\n",
       "      <td>3</td>\n",
       "      <td>Ware, Mr. Frederick</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>359309</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>417</th>\n",
       "      <td>1309</td>\n",
       "      <td>3</td>\n",
       "      <td>Peter, Master. Michael J</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2668</td>\n",
       "      <td>22.3583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>418 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     PassengerId  Pclass                                          Name  \\\n",
       "0            892       3                              Kelly, Mr. James   \n",
       "1            893       3              Wilkes, Mrs. James (Ellen Needs)   \n",
       "2            894       2                     Myles, Mr. Thomas Francis   \n",
       "3            895       3                              Wirz, Mr. Albert   \n",
       "4            896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)   \n",
       "..           ...     ...                                           ...   \n",
       "413         1305       3                            Spector, Mr. Woolf   \n",
       "414         1306       1                  Oliva y Ocana, Dona. Fermina   \n",
       "415         1307       3                  Saether, Mr. Simon Sivertsen   \n",
       "416         1308       3                           Ware, Mr. Frederick   \n",
       "417         1309       3                      Peter, Master. Michael J   \n",
       "\n",
       "        Sex   Age  SibSp  Parch              Ticket      Fare Cabin Embarked  \n",
       "0      male  34.5      0      0              330911    7.8292   NaN        Q  \n",
       "1    female  47.0      1      0              363272    7.0000   NaN        S  \n",
       "2      male  62.0      0      0              240276    9.6875   NaN        Q  \n",
       "3      male  27.0      0      0              315154    8.6625   NaN        S  \n",
       "4    female  22.0      1      1             3101298   12.2875   NaN        S  \n",
       "..      ...   ...    ...    ...                 ...       ...   ...      ...  \n",
       "413    male   NaN      0      0           A.5. 3236    8.0500   NaN        S  \n",
       "414  female  39.0      0      0            PC 17758  108.9000  C105        C  \n",
       "415    male  38.5      0      0  SOTON/O.Q. 3101262    7.2500   NaN        S  \n",
       "416    male   NaN      0      0              359309    8.0500   NaN        S  \n",
       "417    male   NaN      1      1                2668   22.3583   NaN        C  \n",
       "\n",
       "[418 rows x 11 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kate\n",
    "test=pd.read_csv('C:/Users/Kate/anaconda/Lib/test.csv')\n",
    "test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0622df7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>22.0</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>26.0</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>35.0</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>27.0</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>19.0</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>32.0</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Survived  Pclass   Age     Sex\n",
       "0           0       3  22.0    male\n",
       "1           1       1  38.0  female\n",
       "2           1       3  26.0  female\n",
       "3           1       1  35.0  female\n",
       "4           0       3  35.0    male\n",
       "..        ...     ...   ...     ...\n",
       "886         0       2  27.0    male\n",
       "887         1       1  19.0  female\n",
       "888         0       3   NaN  female\n",
       "889         1       1  26.0    male\n",
       "890         0       3  32.0    male\n",
       "\n",
       "[891 rows x 4 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kate\n",
    "only=train.loc[:,[\"Survived\", \"Pclass\", \"Age\", \"Sex\"]]\n",
    "only"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bdfe5f8d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>26.0</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>27.0</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>14.0</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>875</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>15.0</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>879</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>56.0</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>880</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>25.0</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>19.0</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>342 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Survived  Pclass   Age     Sex\n",
       "1           1       1  38.0  female\n",
       "2           1       3  26.0  female\n",
       "3           1       1  35.0  female\n",
       "8           1       3  27.0  female\n",
       "9           1       2  14.0  female\n",
       "..        ...     ...   ...     ...\n",
       "875         1       3  15.0  female\n",
       "879         1       1  56.0  female\n",
       "880         1       2  25.0  female\n",
       "887         1       1  19.0  female\n",
       "889         1       1  26.0    male\n",
       "\n",
       "[342 rows x 4 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kate\n",
    "\n",
    "# only showing the columns where survived=1\n",
    "#maybe  not required. Focus on only one variable\n",
    "\n",
    "onlysurvived=only[only[\"Survived\"]==1]\n",
    "onlysurvived"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "49f89920",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Survived  Pclass    Age    Sex\n",
       "0       False   False  False  False\n",
       "1       False   False  False  False\n",
       "2       False   False  False  False\n",
       "3       False   False  False  False\n",
       "4       False   False  False  False\n",
       "..        ...     ...    ...    ...\n",
       "886     False   False  False  False\n",
       "887     False   False  False  False\n",
       "888     False   False   True  False\n",
       "889     False   False  False  False\n",
       "890     False   False  False  False\n",
       "\n",
       "[891 rows x 4 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use seaborn to create a simple heatmap to see where the missing data is\n",
    "\n",
    "# ??? how to fill in the missing data\n",
    "\n",
    "only.isnull()\n",
    "\n",
    "#True is null or missing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c5fecd3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Survived      Pclass         Age\n",
       "count  891.000000  891.000000  714.000000\n",
       "mean     0.383838    2.308642   29.699118\n",
       "std      0.486592    0.836071   14.526497\n",
       "min      0.000000    1.000000    0.420000\n",
       "25%      0.000000    2.000000   20.125000\n",
       "50%      0.000000    3.000000   28.000000\n",
       "75%      1.000000    3.000000   38.000000\n",
       "max      1.000000    3.000000   80.000000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kate\n",
    "only.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "78b7d1cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>577</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Survived      Pclass         Age   Sex\n",
       "count   891.000000  891.000000  714.000000   891\n",
       "unique         NaN         NaN         NaN     2\n",
       "top            NaN         NaN         NaN  male\n",
       "freq           NaN         NaN         NaN   577\n",
       "mean      0.383838    2.308642   29.699118   NaN\n",
       "std       0.486592    0.836071   14.526497   NaN\n",
       "min       0.000000    1.000000    0.420000   NaN\n",
       "25%       0.000000    2.000000   20.125000   NaN\n",
       "50%       0.000000    3.000000   28.000000   NaN\n",
       "75%       1.000000    3.000000   38.000000   NaN\n",
       "max       1.000000    3.000000   80.000000   NaN"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kate\n",
    "# this summarizes all the columns (numeric only)\n",
    "\n",
    "only.describe(include='all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "89e0280d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Survived      Pclass         Age\n",
       "count  891.000000  891.000000  714.000000\n",
       "mean     0.383838    2.308642   29.699118\n",
       "std      0.486592    0.836071   14.526497\n",
       "min      0.000000    1.000000    0.420000\n",
       "25%      0.000000    2.000000   20.125000\n",
       "50%      0.000000    3.000000   28.000000\n",
       "75%      1.000000    3.000000   38.000000\n",
       "max      1.000000    3.000000   80.000000"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kate\n",
    "only.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "5f6f821c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 4 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Survived  891 non-null    int64  \n",
      " 1   Pclass    891 non-null    int64  \n",
      " 2   Age       714 non-null    float64\n",
      " 3   Sex       891 non-null    object \n",
      "dtypes: float64(1), int64(2), object(1)\n",
      "memory usage: 28.0+ KB\n"
     ]
    }
   ],
   "source": [
    "#Kate\n",
    "only.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "998cfbc4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      int64\n",
       "Survived         int64\n",
       "Pclass           int64\n",
       "Name            object\n",
       "Sex             object\n",
       "Age            float64\n",
       "SibSp            int64\n",
       "Parch            int64\n",
       "Ticket          object\n",
       "Fare           float64\n",
       "Cabin           object\n",
       "Embarked        object\n",
       "dtype: object"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kate\n",
    "train.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5da66528",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
       "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kate\n",
    "train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d3c33dd0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RangeIndex(start=0, stop=891, step=1)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kate\n",
    "train.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b8781938",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "891"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kate\n",
    "# gives the total number of passengers, as in line [14]\n",
    "\n",
    "train.Survived.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6c4aaeb0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    549\n",
       "1    342\n",
       "Name: Survived, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kate\n",
    "# 1: number of people survived\n",
    "\n",
    "train[\"Survived\"].value_counts().head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "47b39693",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "891"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kate\n",
    "train.Sex.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "90628bcb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "male      577\n",
       "female    314\n",
       "Name: Sex, dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kate\n",
    "train[\"Sex\"].value_counts().head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6124527f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "891"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Kate\n",
    "len(train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6e8df8a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percent of first class who survived: % 62.96\n"
     ]
    }
   ],
   "source": [
    "#Kate\n",
    "class1 = train.loc[train.Pclass == 1][\"Survived\"]\n",
    "rate_class1 = round(sum(class1)/len(class1)*100,2)\n",
    "\n",
    "print(\"Percent of first class who survived: %\", rate_class1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d4b48637",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percent of second class who survived: % 47.28\n"
     ]
    }
   ],
   "source": [
    "class2 = train.loc[train.Pclass == 2][\"Survived\"]\n",
    "rate_class2 = round(sum(class2)/len(class2)*100,2)\n",
    "\n",
    "print(\"Percent of second class who survived: %\", rate_class2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8add3ce1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percent of third class who survived: % 24.24\n"
     ]
    }
   ],
   "source": [
    "class3 = train.loc[train.Pclass == 3][\"Survived\"]\n",
    "rate_class3 = round(sum(class3)/len(class3)*100,2)                    # not sure if corrrect, len(train)??\n",
    "\n",
    "print(\"Percent of third class who survived: %\", rate_class3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4cb7ee73",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "65744eec",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Kate\\anaconda\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Survivors by Ticket Class')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Kate\n",
    "sns.barplot( train[\"Pclass\"], train[\"Survived\"], palette= \"Blues\",data=train) \n",
    "plt.title(\"Survivors by Ticket Class\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "13ade45f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percent of women who survived: % 74.2\n"
     ]
    }
   ],
   "source": [
    "#Kate\n",
    "\n",
    "women = train.loc[train.Sex == 'female'][\"Survived\"]\n",
    "\n",
    "rate_women = round(sum(women)/len(women)*100,2)\n",
    "\n",
    "print(\"Percent of women who survived: %\", rate_women)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3fd3e04f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percent of men who survived: % 18.89\n"
     ]
    }
   ],
   "source": [
    "men = train.loc[train.Sex == 'male'][\"Survived\"]\n",
    "rate_men = round(sum(men)/len(men)*100,2)\n",
    "\n",
    "print(\"Percent of men who survived: %\", rate_men)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "5ffba6b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Kate\\anaconda\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Survivors by Sex')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Kate\n",
    "\n",
    "sns.barplot( train[\"Sex\"], train[\"Survived\"], palette=\"Blues\", data=train)\n",
    "plt.title(\"Survivors by Sex\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "cb8440ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Kate\\anaconda\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Age', ylabel='Survived'>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Kate\n",
    "\n",
    "train[\"Age\"] = train[\"Age\"].fillna(-0.5)\n",
    "test[\"Age\"] = test[\"Age\"].fillna(-0.5)\n",
    "bins = [-1, 0, 5, 12, 18, 24, 35, 60, np.inf]\n",
    "labels = ['Unknown', 'Baby', 'Child', 'Teenager', 'Student', 'Young Adult', 'Adult', 'Senior']\n",
    "train['Age'] = pd.cut(train[\"Age\"], bins, labels = labels)\n",
    "test['Age'] = pd.cut(test[\"Age\"], bins, labels = labels)\n",
    "\n",
    "sns.barplot( train[\"Age\"], train[\"Survived\"], palette=\"Blues\", data=train) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05bb1665",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f578ae69",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Training Dataset Correlational Heatmap'}>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Ericka\n",
    "corr = train.corr()\n",
    "plt.title(\"Training Dataset Correlational Heatmap\")\n",
    "sns.heatmap(corr, cmap=\"Blues\", annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "70887aa4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Select Variable Correlational Heatmap'}>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Ericka\n",
    "#correlation between all survivors age and class\n",
    "corr = onlysurvived.corr()\n",
    "plt.title(\"Select Variable Correlational Heatmap\")\n",
    "sns.heatmap(corr, cmap=\"Blues\", annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "6b5aa591",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Ericka\n",
    "males = (train['Sex'] == 'male').sum()\n",
    "females = (train['Sex'] == 'female').sum()\n",
    "\n",
    "proportions = [males, females]\n",
    "\n",
    "# Create a pie chart\n",
    "plt.pie(\n",
    "    proportions,\n",
    "    \n",
    "    labels = ['Males', 'Females'],\n",
    "    \n",
    "    # with no shadows\n",
    "    shadow = False,\n",
    "    \n",
    "    # with colors\n",
    "    colors = ['blue','cyan'],\n",
    "    \n",
    "    # with one slide exploded out\n",
    "    explode = (0.15 , 0),\n",
    "    \n",
    "    # with the start angle at 90%\n",
    "    startangle = 90,\n",
    "    \n",
    "    # with the percent listed as a fraction\n",
    "    autopct = '%1.1f%%'\n",
    "    )\n",
    "\n",
    "# View the plot drop above\n",
    "plt.axis('equal')\n",
    "\n",
    "# Set labels\n",
    "plt.title(\"Total Passengers by Sex\")\n",
    "\n",
    "# View the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "90186f27",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Ericka\n",
    "males = (onlysurvived['Sex'] == 'male').sum()\n",
    "females = (onlysurvived['Sex'] == 'female').sum()\n",
    "\n",
    "proportions = [males, females]\n",
    "\n",
    "# Create a pie chart\n",
    "plt.pie(\n",
    "    proportions,\n",
    "    \n",
    "    labels = ['Males', 'Females'],\n",
    "    \n",
    "    # with no shadows\n",
    "    shadow = False,\n",
    "    \n",
    "    # with colors\n",
    "    colors = ['blue','cyan'],\n",
    "    \n",
    "    # with one slide exploded out\n",
    "    explode = (0.15 , 0),\n",
    "    \n",
    "    # with the start angle at 90%\n",
    "    startangle = 90,\n",
    "    \n",
    "    # with the percent listed as a fraction\n",
    "    autopct = '%1.1f%%'\n",
    "    )\n",
    "\n",
    "# View the plot drop above\n",
    "plt.axis('equal')\n",
    "\n",
    "# Set labels\n",
    "plt.title(\"Survivors by Sex\")\n",
    "\n",
    "# View the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e0719b88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count             891\n",
       "unique              8\n",
       "top       Young Adult\n",
       "freq              220\n",
       "Name: Age, dtype: object"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Ericka\n",
    "train[\"Age\"].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "d5c98d57",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Passengers by Age'}, xlabel='Age', ylabel='Count'>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Ericka\n",
    "plt.title(\"Passengers by Age\")\n",
    "sns.histplot(data=train, x=\"Age\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "dcd376c1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>Student</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>Young Adult</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>Moran, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330877</td>\n",
       "      <td>8.4583</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>McCarthy, Mr. Timothy J</td>\n",
       "      <td>male</td>\n",
       "      <td>Adult</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17463</td>\n",
       "      <td>51.8625</td>\n",
       "      <td>E46</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>Palsson, Master. Gosta Leonard</td>\n",
       "      <td>male</td>\n",
       "      <td>Baby</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>349909</td>\n",
       "      <td>21.0750</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass                            Name   Sex          Age  \\\n",
       "0            1       3         Braund, Mr. Owen Harris  male      Student   \n",
       "4            5       3        Allen, Mr. William Henry  male  Young Adult   \n",
       "5            6       3                Moran, Mr. James  male      Unknown   \n",
       "6            7       1         McCarthy, Mr. Timothy J  male        Adult   \n",
       "7            8       3  Palsson, Master. Gosta Leonard  male         Baby   \n",
       "\n",
       "   SibSp  Parch     Ticket     Fare Cabin Embarked  \n",
       "0      1      0  A/5 21171   7.2500   NaN        S  \n",
       "4      0      0     373450   8.0500   NaN        S  \n",
       "5      0      0     330877   8.4583   NaN        Q  \n",
       "6      0      0      17463  51.8625   E46        S  \n",
       "7      3      1     349909  21.0750   NaN        S  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Ericka\n",
    "nosurvivors=train[train[\"Survived\"]==0]\n",
    "del nosurvivors[\"Survived\"]\n",
    "nosurvivors.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "c6c17aaf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count             549\n",
       "unique              8\n",
       "top       Young Adult\n",
       "freq              131\n",
       "Name: Age, dtype: object"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Ericka\n",
    "nosurvivors[\"Age\"].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "4fe7b862",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'No Survivors by Age'}, xlabel='Age', ylabel='Count'>"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Ericka\n",
    "plt.title(\"No Survivors by Age\")\n",
    "sns.histplot(data=nosurvivors, x=\"Age\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "51903d66",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>347742</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>237736</td>\n",
       "      <td>30.0708</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass                                               Name  \\\n",
       "1            2       1  Cumings, Mrs. John Bradley (Florence Briggs Th...   \n",
       "2            3       3                             Heikkinen, Miss. Laina   \n",
       "3            4       1       Futrelle, Mrs. Jacques Heath (Lily May Peel)   \n",
       "8            9       3  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)   \n",
       "9           10       2                Nasser, Mrs. Nicholas (Adele Achem)   \n",
       "\n",
       "      Sex   Age  SibSp  Parch            Ticket     Fare Cabin Embarked  \n",
       "1  female  38.0      1      0          PC 17599  71.2833   C85        C  \n",
       "2  female  26.0      0      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3  female  35.0      1      0            113803  53.1000  C123        S  \n",
       "8  female  27.0      0      2            347742  11.1333   NaN        S  \n",
       "9  female  14.0      1      0            237736  30.0708   NaN        C  "
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Ericka\n",
    "survivors=train[train[\"Survived\"]==1]\n",
    "del survivors[\"Survived\"]\n",
    "survivors.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "914abd0a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    342.000000\n",
       "mean      23.958099\n",
       "std       17.234323\n",
       "min       -0.500000\n",
       "25%        7.250000\n",
       "50%       25.000000\n",
       "75%       35.000000\n",
       "max       80.000000\n",
       "Name: Age, dtype: float64"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Ericka\n",
    "survivors[\"Age\"].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "99241544",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Survivors by Age'}, xlabel='Age', ylabel='Count'>"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Ericka\n",
    "plt.title(\"Survivors by Age\")\n",
    "sns.histplot(data=survivors, x=\"Age\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "d144698c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-45-e31d97492929>:10: MatplotlibDeprecationWarning: normalize=None does not normalize if the sum is less than 1 but this behavior is deprecated since 3.3 until two minor releases later. After the deprecation period the default value will be normalize=True. To prevent normalization pass normalize=False \n",
      "  plt.pie(\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAagAAAEZCAYAAADCJLEQAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAMfElEQVR4nO3cfeyvdV3H8debG0GFAElJp4JNvMmzzOkylZRya+lsWdqNG3mXztmGYXYzbxouQ8xqrSx1piZKomm5zNGNw1yZkyydSYhmZmGoIUogqMA57/74XMyz0+FAdeC8jz0e27Xf93td1/f6Xt8f+32f+3yu61DdHQCY5pADfQIAsDcCBcBIAgXASAIFwEgCBcBIAgXASAIF+1FV3buqrquqrqpdVfVnN7P/qVX18Ko6qaou2ta9t6oesj1+TFV9tKq+vB33K1V1dVVdXlWfr6oLt/0+XVXffOt/QrjtCBTsX9ckOSPJg5NckuRRVfXje+5UVYdtD09N8vC9HaiqdiT5nSRHJ3lSkt9I8pEkT0jytiTXJ7nLfj17GOSwm98FDryqOiXJy5M8IMnOJB9LckZ3f3A/vsepSd6T5NokneSyJC/r7t+7pcfo7s8meWVVnbQd42tJ7rwd/9pttyOSXF9VZyZ5YZJdSX557VJvTXL7bb+fT/LerL/T78oK3527+6qqeniSP0lyj6p6ZpK7Jfm3qrpuO95lSY5JcruswO1Kcl2Sq7Kidsh2fldv67+Y5OLu/m8xhQNFoBivqr4pybuSPDvJH2R96X531pf//nZZd9+9qirJDyZ5e1Vd2N0X73FOh3X3DTdxvocmOT/J/ZJ8Ock526Yjk3y0ux9YVT+S5PVJzk1yfJJ7JakkZyX50Lb/jiQXJflwkvskuaa7r9rLW/5Rkhcl+c4kpyc5Icmdktw3K1zPzRrN/WKST2QF6bgkz0zy6SQP6u7Lq+rYW/g7gttGd1sso5ckD0ly5c3s8/SsUdWXkvx5khO39b+Q5ANJDtuePzvJPyY5ci/HODXJZ/ZYd3mSJyZ5apK/yZpm+2LWiOeYJG/c9vnXrEgcsr3uBVkjvS9kjVIuSXJDVnxOS/LorFHNV7JCe06Si7bXfjbJBdv7XJfk7VnTeZ0VvI8keXGSf98ePyrJV7elt2Vnkiu297xiW3fF9n47s0aJr0ly4Xb805IcdaD/W1ssuy+uQXEw+ESSnVV1znbTwHG7b6yqx2cF4YezptP+Osl52+ZfzfqSf1FVnZzkpUlO6+6v7usNq+qQqvqhJMcm+ei2+qFJPpU1RXZWkldkRepbsyLx5CRPq6rDt8eHJPlgkpckOTPJoVlTdg/OGhEmya8nuXQ79zvudgqPSvIPSX4/K2Av3z7HXbv7gXuc7huyRl/XJHl1VhS/ljWK+0iSv932u12SX0vyd1mjuSckuUNWQB+c5O93uzYGB5xAMV6vaa1TskYBv5vk8qp6Z1WdsO3yrCRnd/fHek27vTTJd1TVid29KysWz0nyziQv7+4P7+Pt7lZVV2Z9yZ+Z5Ce6++Pbtsu6+xXbe1yX5MeSPL+7r+7uT2fF5ulZo6r/yBq9HJXk4qybGnZlBeG3sgJxQ1YA/zlrRHPsdmPECVlxek6SR26f/aQkn0xyQVU9LiuSh2ZN1R2dNV3/p0kelhWiL2bdWLEjX59i/Mvt54uyRlsXbud2XNb1rmO384URqtv/zZyDS1XdL+vazT9195Oq6uIk98z6wr/REUke3d3v317zh0kem+SE3vt1nBtvkji3u+++l21PTfLM7n7E9vyEJJ/Lmha7Zlv3/VmjmRN2e+nOJL+d5OeyRjVXZU21fUuS/9yWeyY5PCsy5yb5nqzpvsdsMXpZ1jWoQ7PCeENWYI5J8pmsUeIr8/WbHe6YFcDDt3W1Pb4qK4R32p5/bTu/z23HO7e7X7a33w0cCEZQHHS6+5KsEOzYVl2a5Fndfexuy+13i9Njs0YWF2R9mf+v33q3x1/Iui504m7r7pnkku6uJE/LupZ0eHef0d3XZ033nZ51revIJPft7vt39x2zpt7e2N1PTvK6rIilu9/V3TuyphTP2z7X0d195yTvT/LS7n5V1t2Hz+3uu3b3N22/mxuyYnWf7fyO37YfkeSvkpze3Ud19727e4c4MY1AMV5V3a+qnldVd9+e3yNr+uoD2y6vTvL8qnrAtv2Y7S65bP949XVJnpHkKUl+YAvW/0l378y6o/Csqjq6qk5M8jNZI6Ab3SXJc6rq8O187p/k/O6+NCsuZ1fVkVX17Ul+Mut60035fJKTquqm/mbPS/LcqrpXVR2VNc351r6JOw3hYCBQHAyuzrpB4cKquiYrTBcleV6SdPc7kvxKkrdU1VXbtsdsr31Nkj/u7vO7+4qsELy2qo7fD+d1etaNCZ9K8r4kb866dfxGFyY5OWu0dVaSJ27nkKzAnpT175XekeTM7n73Pt7rbdvPK6rqQ3vZ/vokb8oaGf1L1pTd6f/zjwRzuAYFt4LtmtUzuvuUA30ucLAyggJgJIECYCRTfACMZAQFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFwEgCBcBIAgXASAIFN6Oq3lBVvS0f38v2qqrLt+27quoF2/qHVdUN27q377b/V6vq+27LzwAHI4GCfaiqI5I8JcmTkhyX5OSq+qk9dntjkmOy/p7OTvKSbf2rknwwyX2SPH473nlJLuvuv7jVTx4OcgIF+/biJNd391u6+8okn0xyxh77PC7Je3p5YZJDqurRSa5LcvskxydJVd0hyROTPPK2OXU4uAkU7NsDkly72/NLk9xpj33ukOSi3Z7fkOQRSZ6a5P5J3p/ktdvP93X3Z26tk4VvJAIF+1Z7Wde34HU7u/vi7j6iuw9N8sok35bk6VV1ZVVdW1Vn79czhW8wAgX7dlHWCOlG90jypT32uTbJjt2eH5bkA3vs8+6sa1JvTvLxJA9K8rP79UzhG4xAwb69JMnhVfWjVXVsknsn+c099jk/yfdud/OdlWRXd19w48aqekqSo7r7p7OuSXWSnfH3B/tU3bdktgL+/6qqNyU5bXv6ye4+uaouTJLufmhVVZIvZF2b6iQv7u5f2u311yZ5dnefU1WnJHlvVpze2d2Pv+0+CRxcBAqAkUwxADCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATCSQAEwkkABMJJAATDSfwGkG60qWFjO5gAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Ericka\n",
    "#I don't know why this is giving an error?? \n",
    "class1 = (train['Pclass'] == '1').sum()\n",
    "class2 = (train['Pclass'] == '2').sum()\n",
    "class3 = (train['Pclass'] == '3').sum()\n",
    "\n",
    "proportions = [class1, class2, class3]\n",
    "\n",
    "# Create a pie chart\n",
    "plt.pie(\n",
    "    proportions,\n",
    "    \n",
    "    labels = ['1st Class', '2nd Class', '3rd Class'],\n",
    "    \n",
    "    # with no shadows\n",
    "    shadow = False,\n",
    "    \n",
    "    \n",
    "    # with colors\n",
    "    colors = ['blue','cyan','green'],\n",
    "    \n",
    "    # with the start angle at 90%\n",
    "    startangle = 90,\n",
    "    \n",
    "    # with the percent listed as a fraction\n",
    "    autopct = '%1.1f%%', \n",
    "\n",
    "    )\n",
    "\n",
    "# View the plot drop above\n",
    "plt.axis('equal')\n",
    "\n",
    "# Set labels\n",
    "plt.title(\"Sex Proportion\")\n",
    "\n",
    "# View the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "83d2ec62",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)</td>\n",
       "      <td>female</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>347742</td>\n",
       "      <td>11.1333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>Nasser, Mrs. Nicholas (Adele Achem)</td>\n",
       "      <td>female</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>237736</td>\n",
       "      <td>30.0708</td>\n",
       "      <td>NaN</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass                                               Name  \\\n",
       "1            2       1  Cumings, Mrs. John Bradley (Florence Briggs Th...   \n",
       "2            3       3                             Heikkinen, Miss. Laina   \n",
       "3            4       1       Futrelle, Mrs. Jacques Heath (Lily May Peel)   \n",
       "8            9       3  Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)   \n",
       "9           10       2                Nasser, Mrs. Nicholas (Adele Achem)   \n",
       "\n",
       "      Sex   Age  SibSp  Parch            Ticket     Fare Cabin Embarked  \n",
       "1  female  38.0      1      0          PC 17599  71.2833   C85        C  \n",
       "2  female  26.0      0      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3  female  35.0      1      0            113803  53.1000  C123        S  \n",
       "8  female  27.0      0      2            347742  11.1333   NaN        S  \n",
       "9  female  14.0      1      0            237736  30.0708   NaN        C  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Ericka\n",
    "allsurvivors=train[train[\"Survived\"]==1]\n",
    "del allsurvivors[\"Survived\"]\n",
    "allsurvivors.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "eef822d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Survivors Correlational Heatmap'}>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Ericka\n",
    "corr = allsurvivors.corr()\n",
    "plt.title(\"Survivors Correlational Heatmap\")\n",
    "sns.heatmap(corr, cmap=\"Blues\", annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "4ed8532b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'No Survivors Correlational Heatmap'}>"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Ericka\n",
    "corr = nosurvivors.corr()\n",
    "plt.title(\"No Survivors Correlational Heatmap\")\n",
    "sns.heatmap(corr, cmap=\"Blues\", annot=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
